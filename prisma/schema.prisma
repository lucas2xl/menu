// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum StatusPlan {
  ACTIVE
  INACTIVE
}

enum OrderStatus {
  PENDING
  PREPARING
  DONE
  PAID
  CANCELED
}

model AuthorizedEmailList {
  id    String @id @default(cuid())
  email String @unique

  @@map("authorized_email_list")
}

model User {
  id                 String    @id @default(cuid())
  name               String
  email              String
  imageUrl           String?
  password           String
  role               UserRole  @default(USER)
  isTwoFactorEnabled Boolean   @default(true) @map("is_two_factor_enabled")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  stores             Store[]
  plan               UserPlan?
  Session            Session[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("sessions")
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([email, token])
  @@map("two_factor_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model UserPlan {
  id       String     @id @default(cuid())
  quantity Int        @default(1)
  price    Int        @default(0)
  status   StatusPlan @default(ACTIVE)
  userId   String
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
  @@map("user_plan")
}

model Store {
  id         String          @id @default(cuid())
  name       String
  logo       String?
  slug       String
  userId     String
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]
  categories Category[]
  products   Product[]
  qrcodes    Qrcode[]
  settings   StoreSettings[]

  @@unique([slug])
  @@map("stores")
}

model StoreSettings {
  id              String @id @default(cuid())
  preparationTime Int    @default(0) @map("preparation_time")
  storeId         String @map("store_id")
  store           Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("store_settings")
}

model Qrcode {
  id      String @id @default(cuid())
  storeId String @map("store_id")
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("qrcodes")
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  storeId     String    @map("store_id")
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  products    Product[]

  @@map("categories")
}

model Product {
  id          String            @id @default(cuid())
  name        String
  description String?
  price       Int
  serves      Int               @default(1)
  isFeatured  Boolean?          @default(false) @map("is_featured")
  discount    Int?              @default(0)
  categoryId  String            @map("category_id")
  storeId     String            @map("store_id")
  store       Store             @relation(fields: [storeId], references: [id], onDelete: Cascade)
  category    Category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  images      ProductImage[]
  orderItems  OrderItem[]
  categories  ProductCategory[]

  @@map("products")
}

model ProductImage {
  id        String  @id @default(cuid())
  url       String
  productId String  @map("product_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model ProductCategory {
  id        String                @id @default(cuid())
  name      String
  inputType String                @map("input_type")
  quantity  Int                   @default(1)
  productId String                @map("product_id")
  product   Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  items     ProductCategoryItem[]

  @@map("product_categories")
}

model ProductCategoryItem {
  id                String          @id @default(cuid())
  name              String
  description       String?
  price             Int
  productCategoryId String          @map("product_category_id")
  categories        ProductCategory @relation(fields: [productCategoryId], references: [id], onDelete: Cascade)

  @@map("product_category_items")
}

model Order {
  id          String      @id @default(cuid())
  storeId     String      @map("store_id")
  qrcodeId    String      @map("qrcode_id")
  tableId     String      @map("table_id")
  total       Int
  observation String?
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  status      OrderStatus @default(PENDING)
  store       Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  items       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  quantity  Int
  isDone    Boolean @default(false) @map("is_done")
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}
